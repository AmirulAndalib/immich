generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

generator kysely {
  provider = "prisma-kysely"
}

datasource db {
  provider   = "postgresql"
  url        = env("DB_URL")
  extensions = [cube, earthdistance, pg_trgm, unaccent, uuid_ossp(map: "uuid-ossp", schema: "public"), vectors(map: "vectors", schema: "vectors")]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Activity {
  id        String   @id(map: "PK_24625a1d6b1b089c8ae206fe467") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  albumId   String   @db.Uuid
  assetId   String?  @db.Uuid
  comment   String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  isLiked   Boolean  @default(false)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  albums    Albums   @relation(fields: [albumId], references: [id], onDelete: Cascade, map: "FK_1af8519996fbfb3684b58df280b")
  assets    Assets?  @relation(fields: [assetId], references: [id], onDelete: Cascade, map: "FK_8091ea76b12338cb4428d33d782")
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_3571467bcbe021f66e2bdce96ea")

  @@map(name: "activity")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Albums {
  id                        String                   @id(map: "PK_7f71c7b5bc7c87b8f94c9a93a00") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  albumName                 String                   @default("Untitled Album") @db.VarChar
  albumThumbnailAssetId     String?                  @db.Uuid
  createdAt                 DateTime                 @default(now()) @db.Timestamptz(6)
  deletedAt                 DateTime?                @db.Timestamptz(6)
  description               String                   @default("")
  isActivityEnabled         Boolean                  @default(true)
  order                     String                   @default("desc") @db.VarChar
  ownerId                   String                   @db.Uuid
  updatedAt                 DateTime                 @default(now()) @db.Timestamptz(6)
  activity                  Activity[]
  assets                    Assets?                  @relation(fields: [albumThumbnailAssetId], references: [id], map: "FK_05895aa505a670300d4816debce")
  albums_assets_assets      AlbumsAssetsAssets[]
  albums_shared_users_users AlbumsSharedUsersUsers[]
  shared_links              SharedLinks[]
  users                     Users                    @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "FK_b22c53f35ef20c28c21637c85f4")

  @@map(name: "albums")
}

model AlbumsAssetsAssets {
  albumsId String @db.Uuid
  assetsId String @db.Uuid
  albums   Albums @relation(fields: [albumsId], references: [id], onDelete: Cascade, map: "FK_e590fa396c6898fcd4a50e40927")
  assets   Assets @relation(fields: [assetsId], references: [id], onDelete: Cascade, map: "FK_4bd1303d199f4e72ccdf998c621")

  @@id([albumsId, assetsId], map: "PK_c67bc36fa845fb7b18e0e398180")
  @@index([assetsId], map: "IDX_4bd1303d199f4e72ccdf998c62")
  @@index([albumsId], map: "IDX_e590fa396c6898fcd4a50e4092")
  @@map(name: "albums_assets_assets")
}

model AlbumsSharedUsersUsers {
  albumsId String @db.Uuid
  usersId  String @db.Uuid
  albums   Albums @relation(fields: [albumsId], references: [id], onDelete: Cascade, map: "FK_427c350ad49bd3935a50baab737")
  users    Users  @relation(fields: [usersId], references: [id], onDelete: Cascade, map: "FK_f48513bf9bccefd6ff3ad30bd06")

  @@id([albumsId, usersId], map: "PK_7df55657e0b2e8b626330a0ebc8")
  @@index([albumsId], map: "IDX_427c350ad49bd3935a50baab73")
  @@index([usersId], map: "IDX_f48513bf9bccefd6ff3ad30bd0")
  @@map(name: "albums_shared_users_users")
}

model ApiKeys {
  id        String   @id(map: "PK_5c8a79801b44bd27b79228e1dad") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  key       String   @db.VarChar
  name      String   @db.VarChar
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_6c2e267ae764a9413b863a29342")

  @@map(name: "api_keys")
}

model AssetFaces {
  id                                     String                @id(map: "PK_6df76ab2eb6f5b57b7c2f1fc684") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assetId                                String                @db.Uuid
  boundingBoxX1                          Int                   @default(0)
  boundingBoxY1                          Int                   @default(0)
  boundingBoxX2                          Int                   @default(0)
  boundingBoxY2                          Int                   @default(0)
  embedding                              Unsupported("vector")
  imageWidth                             Int                   @default(0)
  imageHeight                            Int                   @default(0)
  personId                               String?               @db.Uuid
  assets                                 Assets                @relation(fields: [assetId], references: [id], onDelete: Cascade, map: "FK_02a43fd0b3c50fb6d7f0cb7282c")
  person                                 Person?               @relation("asset_faces_personIdToperson", fields: [personId], references: [id], map: "FK_95ad7106dd7b484275443f580f9")
  person_person_faceAssetIdToasset_faces Person[]              @relation("person_faceAssetIdToasset_faces")

  @@index([assetId, personId], map: "IDX_asset_faces_assetId_personId")
  @@index([assetId], map: "IDX_asset_faces_on_assetId")
  @@index([personId], map: "IDX_asset_faces_personId")
  @@index([personId, assetId], map: "IDX_bf339a24070dac7e71304ec530")
  @@index([embedding], map: "face_index")
  @@map(name: "asset_faces")
}

model AssetJobStatus {
  assetId              String    @id(map: "PK_420bec36fc02813bddf5c8b73d4") @db.Uuid
  duplicatesDetectedAt DateTime? @db.Timestamptz(6)
  facesRecognizedAt    DateTime? @db.Timestamptz(6)
  metadataExtractedAt  DateTime? @db.Timestamptz(6)
  assets               Assets    @relation(fields: [assetId], references: [id], onDelete: Cascade, map: "FK_420bec36fc02813bddf5c8b73d4")

  @@map(name: "asset_job_status")
}

model AssetStack {
  id             String   @id(map: "PK_74a27e7fcbd5852463d0af3034b") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  primaryAssetId String   @unique(map: "REL_91704e101438fd0653f582426d") @db.Uuid
  assets         Assets[] @relation("assets_stackIdToasset_stack")
  primaryAsset   Assets   @relation("asset_stack_primaryAssetIdToassets", fields: [primaryAssetId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_91704e101438fd0653f582426dc")

  @@map(name: "asset_stack")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Assets {
  id                                         String               @id(map: "PK_da96729a8b113377cfb6a62439c") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  checksum                                   Bytes
  createdAt                                  DateTime             @default(now()) @db.Timestamptz(6)
  deletedAt                                  DateTime?            @db.Timestamptz(6)
  deviceAssetId                              String               @db.VarChar
  deviceId                                   String               @db.VarChar
  duplicateId                                String?              @db.Uuid
  duration                                   String?              @db.VarChar
  encodedVideoPath                           String?              @default("") @db.VarChar
  fileCreatedAt                              DateTime             @db.Timestamptz(6)
  fileModifiedAt                             DateTime             @db.Timestamptz(6)
  isArchived                                 Boolean              @default(false)
  isFavorite                                 Boolean              @default(false)
  isExternal                                 Boolean              @default(false)
  isOffline                                  Boolean              @default(false)
  isVisible                                  Boolean              @default(true)
  libraryId                                  String?              @db.Uuid
  livePhotoVideoId                           String?              @unique(map: "UQ_16294b83fa8c0149719a1f631ef") @db.Uuid
  localDateTime                              DateTime             @db.Timestamptz(6)
  originalFileName                           String               @db.VarChar
  originalPath                               String               @db.VarChar
  ownerId                                    String               @db.Uuid
  previewPath                                String?              @db.VarChar
  sidecarPath                                String?              @db.VarChar
  stackId                                    String?              @db.Uuid
  thumbhash                                  Bytes?
  thumbnailPath                              String?              @default("") @db.VarChar
  type                                       String               @db.VarChar
  updatedAt                                  DateTime             @default(now()) @db.Timestamptz(6)
  activity                                   Activity[]
  albums                                     Albums[]
  albumsAssetsAssets                         AlbumsAssetsAssets[]
  assetJobStatus                             AssetJobStatus?
  assetStackAssetStackPrimaryAssetIdToAssets AssetStack?          @relation("asset_stack_primaryAssetIdToassets")
  exifInfo                                   Exif?
  faces                                      AssetFaces[]
  library                                    Libraries?           @relation(fields: [libraryId], references: [id], onDelete: Cascade, map: "FK_9977c3c1de01c3d848039a6b90c")
  livePhotoVideo                             Assets?              @relation("assetsToassets", fields: [livePhotoVideoId], references: [id], map: "FK_16294b83fa8c0149719a1f631ef")
  otherAssets                                Assets?              @relation("assetsToassets")
  owner                                      Users                @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "FK_2c5ac0d6fb58b238fd2068de67d")
  sharedLinks                                SharedLinkAsset[]
  stack                                      AssetStack?          @relation("assets_stackIdToasset_stack", fields: [stackId], references: [id], map: "FK_f15d48fa3ea5e4bda05ca8ab207")
  smartInfo                                  SmartInfo?
  smartSearch                                SmartSearch?
  tags                                       TagAsset[]

  @@unique([ownerId, libraryId, checksum], map: "UQ_assets_owner_library_checksum")
  @@index([originalFileName], map: "IDX_4d66e76dada1ca180f67a205dc")
  @@index([checksum], map: "IDX_8d3efe36c0755849395e6ea866")
  @@index([id, stackId], map: "IDX_asset_id_stackId")
  @@index([originalPath, libraryId], map: "IDX_originalPath_libraryId")
  @@index([fileCreatedAt], map: "idx_asset_file_created_at")
  @@map(name: "assets")
}

model Audit {
  id         Int      @id(map: "PK_1d3d120ddaf7bc9b1ed68ed463a") @default(autoincrement())
  action     String   @db.VarChar
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  entityId   String   @db.Uuid
  entityType String   @db.VarChar
  ownerId    String   @db.Uuid

  @@index([ownerId, createdAt], map: "IDX_ownerId_createdAt")
  @@map(name: "audit")
}

model Exif {
  assetId            String    @id(map: "PK_c0117fdbc50b917ef9067740c44") @db.Uuid
  autoStackId        String?   @db.VarChar
  bitsPerSample      Int?
  city               String?   @db.VarChar
  colorspace         String?   @db.VarChar
  country            String?   @db.VarChar
  dateTimeOriginal   DateTime? @db.Timestamptz(6)
  description        String    @default("")
  exifImageHeight    Int?
  exifImageWidth     Int?
  exposureTime       String?   @db.VarChar
  fileSizeInByte     BigInt?
  fps                Float?
  fNumber            Float?
  focalLength        Float?
  iso                Int?
  latitude           Float?
  lensModel          String?   @db.VarChar
  livePhotoCID       String?   @db.VarChar
  longitude          Float?
  make               String?   @db.VarChar
  model              String?   @db.VarChar
  modifyDate         DateTime? @db.Timestamptz(6)
  orientation        String?   @db.VarChar
  profileDescription String?   @db.VarChar
  projectionType     String?   @db.VarChar
  state              String?   @db.VarChar
  timeZone           String?   @db.VarChar
  assets             Assets    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_c0117fdbc50b917ef9067740c44")

  @@index([autoStackId], map: "IDX_auto_stack_id")
  @@index([livePhotoCID], map: "IDX_live_photo_cid")
  @@index([city], map: "exif_city")
  @@map(name: "exif")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model GeodataPlaces {
  id               Int                  @id(map: "PK_c29918988912ef4036f3d7fbff4")
  admin1Code       String?              @db.VarChar(20)
  admin2Code       String?              @db.VarChar(80)
  admin1Name       String?              @db.VarChar
  admin2Name       String?              @db.VarChar
  alternateNames   String?              @db.VarChar
  countryCode      String               @db.Char(2)
  earthCoord       Unsupported("cube")? @default(dbgenerated("ll_to_earth(latitude, longitude)"))
  longitude        Float
  latitude         Float
  modificationDate DateTime             @db.Date
  name             String               @db.VarChar(200)

  @@index([earthCoord], map: "IDX_geodata_gist_earthcoord", type: Gist)
  @@map(name: "geodata_places")
}

model Libraries {
  id                String    @id(map: "PK_505fedfcad00a09b3734b4223de") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime? @db.Timestamptz(6)
  exclusionPatterns String[]
  importPaths       String[]
  isVisible         Boolean   @default(true)
  name              String    @db.VarChar
  ownerId           String    @db.Uuid
  refreshedAt       DateTime? @db.Timestamptz(6)
  type              String    @db.VarChar
  updatedAt         DateTime  @default(now()) @db.Timestamptz(6)
  assets            Assets[]
  owner             Users     @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "FK_0f6fc2fb195f24d19b0fb0d57c1")

  @@map(name: "libraries")
}

model MoveHistory {
  id       String @id(map: "PK_af608f132233acf123f2949678d") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityId String @db.VarChar
  newPath  String @unique(map: "UQ_newPath") @db.VarChar
  oldPath  String @db.VarChar
  pathType String @db.VarChar

  @@unique([entityId, pathType], map: "UQ_entityId_pathType")
  @@map(name: "move_history")
}

model Partners {
  sharedById   String   @db.Uuid
  sharedWithId String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  inTimeline   Boolean  @default(false)
  sharedBy     Users    @relation("partners_sharedByIdTousers", fields: [sharedById], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7e077a8b70b3530138610ff5e04")
  sharedWith   Users    @relation("partners_sharedWithIdTousers", fields: [sharedWithId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d7e875c6c60e661723dbf372fd3")
  updatedAt    DateTime @default(now()) @db.Timestamptz(6)

  @@id([sharedById, sharedWithId], map: "PK_f1cc8f73d16b367f426261a8736")
  @@map(name: "partners")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Person {
  id                                          String       @id(map: "PK_5fdaf670315c4b7e70cce85daa3") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  birthDate                                   DateTime?    @db.Date
  createdAt                                   DateTime     @default(now()) @db.Timestamptz(6)
  faceAssetId                                 String?      @db.Uuid
  isHidden                                    Boolean      @default(false)
  name                                        String       @default("") @db.VarChar
  ownerId                                     String       @db.Uuid
  thumbnailPath                               String       @default("") @db.VarChar
  updatedAt                                   DateTime     @default(now()) @db.Timestamptz(6)
  asset_faces_asset_faces_personIdToperson    AssetFaces[] @relation("asset_faces_personIdToperson")
  asset_faces_person_faceAssetIdToasset_faces AssetFaces?  @relation("person_faceAssetIdToasset_faces", fields: [faceAssetId], references: [id], onUpdate: NoAction, map: "FK_2bbabe31656b6778c6b87b61023")
  users                                       Users        @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "FK_5527cc99f530a547093f9e577b6")

  @@map(name: "person")
}

model SharedLinkAsset {
  assetsId      String      @db.Uuid
  sharedLinksId String      @db.Uuid
  assets        Assets      @relation(fields: [assetsId], references: [id], onDelete: Cascade, map: "FK_5b7decce6c8d3db9593d6111a66")
  sharedLinks   SharedLinks @relation(fields: [sharedLinksId], references: [id], onDelete: Cascade, map: "FK_c9fab4aa97ffd1b034f3d6581ab")

  @@id([assetsId, sharedLinksId], map: "PK_9b4f3687f9b31d1e311336b05e3")
  @@index([assetsId], map: "IDX_5b7decce6c8d3db9593d6111a6")
  @@index([sharedLinksId], map: "IDX_c9fab4aa97ffd1b034f3d6581a")
  @@map(name: "shared_link__asset")
}

model SharedLinks {
  id            String            @id(map: "PK_642e2b0f619e4876e5f90a43465") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  albumId       String?           @db.Uuid
  allowDownload Boolean           @default(true)
  allowUpload   Boolean           @default(false)
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  description   String?           @db.VarChar
  expiresAt     DateTime?         @db.Timestamptz(6)
  key           Bytes             @unique(map: "UQ_sharedlink_key")
  password      String?           @db.VarChar
  showExif      Boolean           @default(true)
  type          String            @db.VarChar
  userId        String            @db.Uuid
  assets        SharedLinkAsset[]
  albums        Albums?           @relation(fields: [albumId], references: [id], onDelete: Cascade, map: "FK_0c6ce9058c29f07cdf7014eac66")
  users         Users             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_66fe3837414c5a9f1c33ca49340")

  @@index([albumId], map: "IDX_sharedlink_albumId")
  @@index([key], map: "IDX_sharedlink_key")
  @@map(name: "shared_links")
}

model SmartInfo {
  assetId                       String                  @id(map: "PK_5e3753aadd956110bf3ec0244ac") @db.Uuid
  objects                       String[]
  tags                          String[]
  assets                        Assets                  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_5e3753aadd956110bf3ec0244ac")
  smartInfoTextSearchableColumn Unsupported("tsvector") @default(dbgenerated("to_tsvector('english'::regconfig, f_concat_ws(' '::text, (COALESCE(tags, ARRAY[]::text[]) || COALESCE(objects, ARRAY[]::text[]))))"))

  @@index([tags], map: "si_tags", type: Gin)
  @@index([smartInfoTextSearchableColumn], map: "smart_info_text_searchable_idx", type: Gin)
  @@map(name: "smart_info")
}

model SmartSearch {
  assetId   String                @id @db.Uuid
  embedding Unsupported("vector")
  assets    Assets                @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([embedding], map: "clip_index")
  @@map(name: "smart_search")
}

model SocketIoAttachments {
  id         BigInt    @unique @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  payload    Bytes?

  @@map(name: "socket_io_attachments")
}

model SystemMetadata {
  key   String @id(map: "PK_fa94f6857470fb5b81ec6084465") @db.VarChar
  value Json   @default("{}")

  @@map(name: "system_metadata")
}

model TagAsset {
  assetsId String @db.Uuid
  tagsId   String @db.Uuid
  assets   Assets @relation(fields: [assetsId], references: [id], onDelete: Cascade, map: "FK_f8e8a9e893cb5c54907f1b798e9")
  tags     Tags   @relation(fields: [tagsId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_e99f31ea4cdf3a2c35c7287eb42")

  @@id([assetsId, tagsId], map: "PK_ef5346fe522b5fb3bc96454747e")
  @@index([tagsId], map: "IDX_e99f31ea4cdf3a2c35c7287eb4")
  @@index([assetsId], map: "IDX_f8e8a9e893cb5c54907f1b798e")
  @@index([assetsId, tagsId], map: "IDX_tag_asset_assetsId_tagsId")
  @@map(name: "tag_asset")
}

model Tags {
  id          String     @id(map: "PK_e7dc17249a1148a1970748eda99") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String     @db.VarChar
  renameTagId String?    @db.Uuid
  type        String     @db.VarChar
  userId      String     @db.Uuid
  tags        TagAsset[]
  users       Users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_92e67dc508c705dd66c94615576")

  @@unique([name, userId], map: "UQ_tag_name_userId")
  @@map(name: "tags")
}

model UserToken {
  id         String   @id(map: "PK_48cb6b5c20faa63157b3c1baf7f") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  deviceOS   String   @default("") @db.VarChar
  deviceType String   @default("") @db.VarChar
  token      String   @db.VarChar
  updatedAt  DateTime @default(now()) @db.Timestamptz(6)
  userId     String   @db.Uuid
  users      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_d37db50eecdf9b8ce4eedd2f918")

  @@map(name: "user_token")
}

model Users {
  id                     String                   @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  avatarColor            String?                  @db.VarChar
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  deletedAt              DateTime?                @db.Timestamptz(6)
  email                  String                   @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar
  isAdmin                Boolean                  @default(false)
  memoriesEnabled        Boolean                  @default(true)
  name                   String                   @default("") @db.VarChar
  oauthId                String                   @default("") @db.VarChar
  password               String                   @default("") @db.VarChar
  profileImagePath       String                   @default("") @db.VarChar
  quotaSizeInBytes       BigInt?
  quotaUsageInBytes      BigInt                   @default(0)
  shouldChangePassword   Boolean                  @default(true)
  status                 String                   @default("active") @db.VarChar
  storageLabel           String?                  @unique(map: "UQ_b309cf34fa58137c416b32cea3a") @db.VarChar
  updatedAt              DateTime                 @default(now()) @db.Timestamptz(6)
  activity               Activity[]
  albums                 Albums[]
  albumsSharedUsersUsers AlbumsSharedUsersUsers[]
  apiKeys                ApiKeys[]
  assets                 Assets[]
  libraries              Libraries[]
  person                 Person[]
  sharedBy               Partners[]               @relation("partners_sharedByIdTousers")
  sharedLinks            SharedLinks[]
  sharedWith             Partners[]               @relation("partners_sharedWithIdTousers")
  tags                   Tags[]
  userToken              UserToken[]

  @@map(name: "users")
}
